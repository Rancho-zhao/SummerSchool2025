import logging
import time
import lcm
from lcm_msgs import RobotCommand, RobotStatus  # Generated by lcm-gen

from lerobot.common.robots.so101_follower.so101_follower import SO101Follower
from lerobot.common.robots.so101_follower.config_so101_follower import SO101FollowerConfig

class RobotController:
    def __init__(self):
        config = SO101FollowerConfig(
            port="/dev/ttyACM0",  # Change to your port!
            use_degrees=True,
            # max_relative_target={
            #     "shoulder_pan": 20.0,
            #     "shoulder_lift": 100.0,
            #     "elbow_flex": 100.0,
            #     "wrist_flex": 100.0,
            #     "wrist_roll": 100.0,
            #     "gripper": 100.0,
            # },
        )

        time.sleep(2)
        self.robot = SO101Follower(config)
        self.robot.connect()
        self.lc = lcm.LCM()
        self.lc.subscribe("ROBOT_COMMAND", self.command_handler)
        print("RobotController initialized and waiting for commands...")
    
    def command_handler(self, channel, data):
        msg = RobotCommand.decode(data)
        area = msg.area.lower()
        print(f"Received command for area: {area}")
        if area == "grasp_area":
            self.do_grasp_area()
        elif area in ["region_a", "region_b", "region_c"]:
            self.do_region(area)
        else:
            print(f"Unknown area: {area}")

    def do_grasp_area(self):
        # Move to pre-grasp with open gripper
        open_gripper = 60  # Adjust as needed
        closed_gripper = 0  # Adjust as needed
        pre_grasp_pos = {
            "shoulder_pan.pos": 0,
            "shoulder_lift.pos": 0,
            "elbow_flex.pos": 0,
            "wrist_flex.pos": 0,
            "wrist_roll.pos": 0,
            "gripper.pos": open_gripper,
        }
        print("Moving to grasp area (open gripper)...")
        self.robot.send_action(pre_grasp_pos)
        time.sleep(2)
        # Close gripper to grasp
        grasp_pos = pre_grasp_pos.copy()
        grasp_pos["gripper.pos"] = closed_gripper
        print("Closing gripper to grasp object...")
        self.robot.send_action(grasp_pos)
        time.sleep(2)
        # Publish completion
        self.publish_complete()

    def do_region(self, region):
        closed_gripper = 0  # Adjust as needed
        open_gripper = 60
        # You can change joint positions per region if needed
        waypoint_pos = {
            "shoulder_pan.pos": -60,
            "shoulder_lift.pos": 0,
            "elbow_flex.pos": 0,
            "wrist_flex.pos": 0,
            "wrist_roll.pos": 0,
            "gripper.pos": closed_gripper,
        }

        region_pos = {
            "shoulder_pan.pos": -60,  # Example for region a
            "shoulder_lift.pos": 0,
            "elbow_flex.pos": 20,
            "wrist_flex.pos": 70,
            "wrist_roll.pos": 0,
            "gripper.pos": closed_gripper,
        }
        if region == "region_b":
            waypoint_pos["shoulder_pan.pos"] = -75
            region_pos["shoulder_pan.pos"] = -75
        elif region == "region_c":
            waypoint_pos["shoulder_pan.pos"] = -100
            region_pos["shoulder_pan.pos"] = -100
        print(f"Moving to {region} with closed gripper...")
        self.robot.send_action(waypoint_pos)
        time.sleep(2)
        self.robot.send_action(region_pos)
        time.sleep(2)
        # Open gripper to release object
        region_pos["gripper.pos"] = open_gripper
        print("Opening gripper to release object...")
        self.robot.send_action(region_pos)
        time.sleep(2)

    def publish_complete(self):
        status_msg = RobotStatus()
        status_msg.completed = True  # Indicate completion
        # Publish the completion signal
        self.lc.publish("ROBOT_STATUS", status_msg.encode())
        print("Published completion signal for grasp area.")

    def run(self):
        try:
            while True:
                self.lc.handle_timeout(100)
        except KeyboardInterrupt:
            print("Shutting down...")
            self.robot.disconnect()

if __name__ == "__main__":
    controller = RobotController()
    controller.run()
